name: Chat App CI/CD Pipeline

# When to run this workflow
on:
  # Run on every push to main branch
  push:
    branches: [ main, master ]
  # Run on every pull request to main branch  
  pull_request:
    branches: [ main, master ]
  # Allow manual trigger
  workflow_dispatch:

# Environment variables for the entire workflow
env:
  NODE_VERSION: '18'
  MONGODB_URI: mongodb://localhost:27017/chat_app_test
  POSTGRES_CONNECTION_STRING: postgresql://postgres:postgres@localhost:5432/chat_app_test?sslmode=disable
  NODE_ENV: test

jobs:
  # Job 1: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    # Services (databases) that our tests need
    services:
      # MongoDB service
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # PostgreSQL service  
      postgres:
        image: postgres:bookworm
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chat_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Step 1: Get the code
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    # Step 2: Setup Node.js
    - name: 🚀 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Step 3: Install dependencies
    - name: 📦 Install dependencies
      run: npm ci

    # Step 4: Wait for databases to be ready
    - name: ⏳ Wait for MongoDB
      run: |
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        echo "MongoDB is ready!"

    - name: ⏳ Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        echo "PostgreSQL is ready!"

    # Step 5: Run linting (if you have ESLint configured)
    - name: 🔍 Run Linting
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
          npm run lint || echo "No lint script found, skipping..."
        else
          echo "No ESLint config found, skipping linting..."
        fi
      continue-on-error: true

    # Step 6: Run unit tests
    - name: 🧪 Run Unit Tests
      run: npm test -- --testPathIgnorePatterns=integration

    # # Step 7: Run integration tests
    # - name: 🔗 Run Integration Tests  
    #   run: npm run test:integration

    # # Step 8: Generate test coverage report
    # - name: 📊 Generate Coverage Report
    #   run: npm run test:coverage

    # # Step 9: Upload coverage to GitHub (optional)
    # - name: 📤 Upload Coverage Reports
    #   uses: actions/upload-artifact@v4
      # with:
      #   name: coverage-reports
      #   path: coverage/
      #   retention-days: 7
